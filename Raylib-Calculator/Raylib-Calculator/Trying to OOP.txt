#include "raylib.h"
#include <iostream>
#include <string>
#include "UserInput.h"
#include "Evaluation.h"
#include <list>
#define GetIntArrayLength(x) sizeof(x) / sizeof(int)

#define BUTTON_PRESSED (CheckCollisionRecs(ButtonRectangle, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT))

using namespace std;
#define print(x) cout << x

//------------------------------------------------------------------------------------
// Program main entry point
//------------------------------------------------------------------------------------

int frameCount = 0;
int blinkerCount = 0;
int backSpaceCount = 0;
int arrowKeyCount = 0;
int fontSize = 40;
int buttonFontSize = 60;
float pixelTextMinus = 0;
int cursorPos = 0;
bool canType = true;
const char * resultsText;
string evaluatedValue;
float buttonWidth = 80.0f;
float buttonHeight = 100.0f;
float row1 = 175.0f;
float spacing = 15.0f;
float row2 = buttonHeight + row1 + spacing;
float row3 = buttonHeight + row2 + spacing;
float row4 = buttonHeight + row3 + spacing;

Rectangle mousePos = { GetMousePosition().x, GetMousePosition().y, 2, 2 };

list<int> cursorCorX;
list<int> cursorCorY;

string buttonPress = "None";

CLITERAL(Color) numButtonColor { 190, 33, 55, 255 }; // MAROON
CLITERAL(Color) numButtonColorHighlight { 224, 66, 87, 255 }; // MAROON HIGHLIGHT
CLITERAL(Color) numButtonColorPressed { 164, 36, 53, 255 }; // MAROON PRESS

CLITERAL(Color) operatorButtonColor { 214, 46, 26, 255 }; // ORANGE-Y
CLITERAL(Color) operatorColorHighlight { 240, 84, 66, 255 }; // ORANGE-Y HIGHLIGHT
CLITERAL(Color) operatorColorPressed { 174, 23, 10, 255 }; // ORANGE-Y PRESS

CLITERAL(Color) numTextColor { 200, 200, 200, 255 };
CLITERAL(Color) operatorTextColor { 200, 200, 200, 200 };




CLITERAL(Color) backgroundColor { 212, 192, 190, 255 }; // Background color


class Button{
public:
	// Attributes
	Rectangle ButtonRectangle;
	string Text;
	CLITERAL(Color) ButtonColor;
	int XAdjust;
	int YAdjust;
	float Row;
	int Column;
	bool KeyPressed;
	bool KeyHover;

	// Constructor
	Button(Rectangle rectangle, string text, int xadjust, int yadjust, float row, int column, bool keyPressed, bool keyHover)
		: ButtonRectangle(rectangle), Text(text), XAdjust(xadjust), YAdjust(yadjust), Row(row), Column(column), KeyPressed(keyPressed), KeyHover(keyHover){}

	virtual void Render() {
		DrawText(Text.c_str, (buttonWidth*Column) + XAdjust, Row + YAdjust, buttonFontSize, ButtonColor);
		DrawRectangleRounded(ButtonRectangle, 0.2f, 2, ButtonColor);

		if (BUTTON_PRESSED) {
			buttonPress = "one";
		}
		else if ((CheckCollisionRecs(key1, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_ONE))) {
			button1Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key1, mousePos)) {
			button1Color = numButtonColorHighlight;
		}
		else {
			button1Color = numButtonColor;
		}
	}

};

class NumButton : public Button {
public:
	// Constructor
	NumButton(Rectangle rectangle, string text, int xadjust, int yadjust, float row, int column, int key, bool keyPressed, bool keyHover)
		: Button(rectangle, text, xadjust, yadjust, row, column, key, keyPressed, keyHover) {
		ButtonColor = numButtonColor;
	}
};


class OpButton : public Button {
public:
	// Constructor
	OpButton(Rectangle rectangle, string text, int xadjust, int yadjust, float row, int column, int key, bool keyPressed, bool keyHover)
		: Button(rectangle, text, xadjust, yadjust, row, column, key, keyPressed, keyHover) {
		ButtonColor = operatorButtonColor;
	}
};

class ACButton : public Button {
public:

	ACButton(Rectangle rectangle, string text, int xadjust, int yadjust, float row, int column, int key, bool keyPressed, bool keyHover)
		: Button(rectangle, text, xadjust, yadjust, row, column, key, keyPressed, keyHover) {
		ButtonColor = operatorButtonColor;
	}

	void Render() override {
		DrawRectangleRounded(ButtonRectangle, 0.2f, 2, ButtonColor);
		DrawText("A", 15 + 20, row4 + 22, buttonFontSize / 2, operatorTextColor);
		DrawText("/", 15 + 28, row4 + 40, buttonFontSize / 2, operatorTextColor);
		DrawText("C", 15 + 41, row4 + 55, buttonFontSize / 2, operatorTextColor);
	}
};


int main(void)
{
	// Initialization
	//--------------------------------------------------------------------------------------
	const int screenWidth = 475;
	const int screenHeight = 635;

	InitWindow(screenWidth, screenHeight, "raylib calculator");

	Vector2 touchPosition = { 0, 0 };

	string myString = "";
	evaluatedValue = "";
	resultsText = myString.c_str();
	const char * calculationsText;
	const char * typeline;


	SetTargetFPS(60);               // Set our game to run at 60 frames-per-second
	//--------------------------------------------------------------------------------------

	// Main game loop
	while (!WindowShouldClose())    // Detect window close button or ESC key
	{
		// Update
		//----------------------------------------------------------------------------------

		mousePos = { GetMousePosition().x, GetMousePosition().y, 2, 2};

		frameCount += 1;
		if (frameCount > 60) frameCount = 0;

		blinkerCount += 1;
		if (blinkerCount > 60) blinkerCount = 0;

		if (IsKeyPressed(KEY_ENTER) || (IsKeyPressed(KEY_EQUAL) && (!IsKeyDown(KEY_LEFT_SHIFT) && !IsKeyDown(KEY_RIGHT_SHIFT))) || buttonPress == "equals") {
			evaluatedValue = EvaluateExpression(myString);
		}
		myString = GetUserInput(myString);


		Vector2 mousePosition = GetMousePosition();
		size_t listSize = cursorCorX.size();

		if (IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
			int closest = std::numeric_limits<int>::max();
			int newPos = cursorPos;

			if (mousePosition.y < 90) {
				for (int i = 0; i < listSize; i++) {
					list<int>::iterator xPlacement = std::next(cursorCorX.begin(), i);
					int thisx = *xPlacement;
					if (abs(mousePosition.x - thisx) < closest) {
						closest = abs(mousePosition.x - thisx);
						newPos = i;
					}
				}
				cursorPos = newPos;
				blinkerCount = 0;
			}
		}

		
		if (!cursorCorX.empty()) {
			int lastElement = cursorCorX.back();
			if (lastElement > 447) {
				canType = false;
			}
			else {
				canType = true;
			}
		}
		else {
			canType = true;
		}


		

		//----------------------------------------------------------------------------------

		// Draw
		//----------------------------------------------------------------------------------
		BeginDrawing();

		ClearBackground(backgroundColor);

		calculationsText = myString.c_str();
		resultsText = evaluatedValue.c_str();
		typeline = "|";

		int pixelTextLength = 0;
		cursorCorX.clear();
		cursorCorY.clear();
		cursorCorX.push_back(20);
		cursorCorY.push_back(20);

		for (int i = 0; i < myString.length(); i++) {
			if (myString[i] == '.') {
				pixelTextLength += 0.2f * fontSize;
			}
			else if (myString[i] == '1') {
				pixelTextLength += 0.3f * fontSize;
			}
			else if (myString[i] == '/') {
				pixelTextLength += 0.8f * fontSize;
			}
			else if (myString[i] == '-') {
				pixelTextLength += 0.5f * fontSize;
			}
			else if ((myString[i] == '(') || (myString[i] == ')') || (myString[i] == ' ') || myString[i] == '^') {
				pixelTextLength += 0.4f * fontSize;
			}
			else {
				pixelTextLength += 0.6f * fontSize;
			}
			cursorCorX.push_back(20 + pixelTextLength);
			cursorCorY.push_back(20);
		}

		pixelTextLength -= pixelTextMinus;

		DrawText(calculationsText, 20, 20, fontSize, DARKGRAY);

		DrawText(resultsText, 20, 80, 30, DARKGRAY);

		if (blinkerCount < 30) {
			//DrawText(typeline, 12 + pixelTextLength, 10, fontSize, DARKGRAY);
			std::list<int>::iterator xPlacement = std::next(cursorCorX.begin(), cursorPos);
			int cursorPlacement = *xPlacement;

			if (cursorPos == myString.length()) {
				DrawText(typeline, cursorPlacement, 20, fontSize, DARKGRAY);
			}
			else {
				DrawText(typeline, cursorPlacement-4, 20, fontSize, DARKGRAY);
			}
		}

		//ROW1 (1   2    3   +   -)
		NumButton button1({ 15, row1, buttonWidth, buttonHeight }, "1", 15 + 32, 22, row1, 0, KEY_ONE);
		NumButton button2({ spacing * 3 + buttonWidth - 20, row1, buttonWidth, buttonHeight }, "2", 15+36, 22, row1, 1, KEY_TWO);
		NumButton button3({ spacing * 9 + buttonWidth - 20, row1, buttonWidth, buttonHeight }, "3", 15 + 46, 22, row1, 2, KEY_THREE);
		OpButton buttonPlus({ spacing * 15 + buttonWidth - 20, row1, buttonWidth, buttonHeight }, "+", 30 + 41, 22, row1, 3, KEY_FOUR);
		OpButton buttonMinus({ spacing * 21 + buttonWidth - 20, row1, buttonWidth, buttonHeight }, "-", 45 + 39, 22, row1, 4, KEY_FIVE);

		//ROW2 (4   5   6   *   /)
		NumButton button4({ 15, row2, buttonWidth, buttonHeight }, "4", 15 + 26, 22, row2, 0);
		NumButton button5({ spacing * 3 + buttonWidth - 20, row2, buttonWidth, buttonHeight }, "5", 15 + 36, 22, row2, 1);
		NumButton button6({ spacing * 9 + buttonWidth - 20, row2, buttonWidth, buttonHeight }, "6", 15 + 46, 22, row2, 2);
		OpButton buttonMultiply({ spacing * 15 + buttonWidth - 20, row2, buttonWidth, buttonHeight }, "*", 30 + 40, 22, row2, 3);
		OpButton buttonDivide({ spacing * 21 + buttonWidth - 20, row2, buttonWidth, buttonHeight }, 45 + 30, 22, row2, 4);

		//ROW3 (7   8   9   (   ))
		NumButton button7({ 15, row3, buttonWidth, buttonHeight }, "7", 15 + 26, 22, row3, 0);
		NumButton button8({ spacing * 3 + buttonWidth - 20, row3, buttonWidth, buttonHeight }, "8", 15+36, 22, row3, 1);
		NumButton button9({ spacing * 9 + buttonWidth - 20, row3, buttonWidth, buttonHeight }, "9", 15 + 46, 22, row3, 2);
		OpButton buttonOpenP({ spacing * 15 + buttonWidth - 20, row3, buttonWidth, buttonHeight }, "(", 30 + 42, 22, row3, 3);
		OpButton buttonCloseP({ spacing * 21 + buttonWidth - 20, row3, buttonWidth, buttonHeight }, ")", 45 + 41, 22, row3, 4);

		//ROW4 (   0    .   %   ^)
		ACButton buttonAC({ 15, row4, buttonWidth, buttonHeight }, "A/C", 15 + 20, 22, row4, 0);
		NumButton button0({ spacing * 3 + buttonWidth - 20, row4, buttonWidth, buttonHeight }, "0", 15+36, 22, row4, 1);
		OpButton buttonPeriod({ spacing * 9 + buttonWidth - 20, row4, buttonWidth, buttonHeight }, ".", 15 + 57, 22, row4, 2);
		OpButton buttonExponent({ spacing * 15 + buttonWidth - 20, row4, buttonWidth, buttonHeight }, "^", 30+47, 22, row4, 3);
		OpButton buttonEquals({ spacing * 21 + buttonWidth - 20, row4, buttonWidth, buttonHeight }, "=", 45+39, 22, row4, 4);


		if (CheckCollisionRecs(key1, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "one";
		}
		else if ((CheckCollisionRecs(key1, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_ONE))) {
			button1Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key1, mousePos)) {
			button1Color = numButtonColorHighlight;
		}
		else {
			button1Color = numButtonColor;
		}

		if (CheckCollisionRecs(key2, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "two";
		}
		else if ((CheckCollisionRecs(key2, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_TWO)))  {
			button2Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key2, mousePos)) {
			button2Color = numButtonColorHighlight;
		}
		else {
			button2Color = numButtonColor;
		}

		if (CheckCollisionRecs(key3, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "three";
		}
		else if ((CheckCollisionRecs(key3, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_THREE)))  {
			button3Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key3, mousePos)) {
			button3Color = numButtonColorHighlight;
		}
		else {
			button3Color = numButtonColor;
		}

		if (CheckCollisionRecs(key4, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "four";
		}
		else if ((CheckCollisionRecs(key4, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_FOUR))) {
			button4Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key4, mousePos)) {
			button4Color = numButtonColorHighlight;
		}
		else {
			button4Color = numButtonColor;
		}

		if (CheckCollisionRecs(key5, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "five";
		}
		else if ((CheckCollisionRecs(key5, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_FIVE))) {
			button5Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key5, mousePos)) {
			button5Color = numButtonColorHighlight;
		}
		else {
			button5Color = numButtonColor;
		}

		if (CheckCollisionRecs(key6, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "six";
		}
		else if ((CheckCollisionRecs(key6, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_SIX) && (!IsKeyDown(KEY_LEFT_SHIFT) && !IsKeyDown(KEY_RIGHT_SHIFT)))) {
			button6Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key6, mousePos)) {
			button6Color = numButtonColorHighlight;
		}
		else {
			button6Color = numButtonColor;
		}

		if (CheckCollisionRecs(key7, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "seven";
		}
		else if ((CheckCollisionRecs(key7, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_SEVEN))) {
			button7Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key7, mousePos)) {
			button7Color = numButtonColorHighlight;
		}
		else {
			button7Color = numButtonColor;
		}

		if (CheckCollisionRecs(key8, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "eight";
		}
		else if ((CheckCollisionRecs(key8, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_EIGHT) && (!IsKeyDown(KEY_LEFT_SHIFT) && !IsKeyDown(KEY_RIGHT_SHIFT)))) {
			button8Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key8, mousePos)) {
			button8Color = numButtonColorHighlight;
		}
		else {
			button8Color = numButtonColor;
		}

		if (CheckCollisionRecs(key9, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "nine";
		}
		else if ((CheckCollisionRecs(key9, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_NINE) && (!IsKeyDown(KEY_LEFT_SHIFT) && !IsKeyDown(KEY_RIGHT_SHIFT)))) {
			button9Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key9, mousePos)) {
			button9Color = numButtonColorHighlight;
		}
		else {
			button9Color = numButtonColor;
		}

		if (CheckCollisionRecs(key0, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "zero";
		}
		else if ((CheckCollisionRecs(key0, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_ZERO) && (!IsKeyDown(KEY_LEFT_SHIFT) && !IsKeyDown(KEY_RIGHT_SHIFT)))) {
			button0Color = numButtonColorPressed;
		}
		else if (CheckCollisionRecs(key0, mousePos)) {
			button0Color = numButtonColorHighlight;
		}
		else {
			button0Color = numButtonColor;
		}

		if (CheckCollisionRecs(keyPlus, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "plus";
		}
		else if ((CheckCollisionRecs(keyPlus, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || ((IsKeyDown(KEY_LEFT_SHIFT) || IsKeyDown(KEY_RIGHT_SHIFT)) && (IsKeyDown(KEY_EQUAL)))) {
			buttonPlusColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyPlus, mousePos)) {
			buttonPlusColor = operatorColorHighlight;
		}
		else {
			buttonPlusColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyMinus, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "minus";
		}
		else if ((CheckCollisionRecs(keyMinus, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_MINUS))) { 
			buttonMinusColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyMinus, mousePos)) {
			buttonMinusColor = operatorColorHighlight;
		}
		else {
			buttonMinusColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyMultiply, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "multiply";
		}
		else if ((CheckCollisionRecs(keyMultiply, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || ((IsKeyDown(KEY_LEFT_SHIFT) || IsKeyDown(KEY_RIGHT_SHIFT)) && (IsKeyDown(KEY_EIGHT)))) {
			buttonMultiplyColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyMultiply, mousePos)) {
			buttonMultiplyColor = operatorColorHighlight;
		}
		else {
			buttonMultiplyColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyDivide, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "slash";
		}
		else if ((CheckCollisionRecs(keyDivide, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_SLASH))) {
			buttonDivideColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyDivide, mousePos)) {
			buttonDivideColor = operatorColorHighlight;
		}
		else {
			buttonDivideColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyOpenP, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "open";
		}
		else if ((CheckCollisionRecs(keyOpenP, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || ((IsKeyDown(KEY_LEFT_SHIFT) || IsKeyDown(KEY_RIGHT_SHIFT)) && (IsKeyDown(KEY_NINE)))) {
			buttonOpenPColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyOpenP, mousePos)) {
			buttonOpenPColor = operatorColorHighlight;
		}
		else {
			buttonOpenPColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyCloseP, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "close";
		}
		else if ((CheckCollisionRecs(keyCloseP, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || ((IsKeyDown(KEY_LEFT_SHIFT) || IsKeyDown(KEY_RIGHT_SHIFT)) && (IsKeyDown(KEY_ZERO)))) {
			buttonClosePColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyCloseP, mousePos)) {
			buttonClosePColor = operatorColorHighlight;
		}
		else {
			buttonClosePColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyPeriod, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "period";
		}
		else if ((CheckCollisionRecs(keyPeriod, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_PERIOD))) {
			buttonPeriodColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyPeriod, mousePos)) {
			buttonPeriodColor = operatorColorHighlight;
		}
		else {
			buttonPeriodColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyExponent, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "exponent";
		}
		else if ((CheckCollisionRecs(keyExponent, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || ((IsKeyDown(KEY_LEFT_SHIFT) || IsKeyDown(KEY_RIGHT_SHIFT)) && (IsKeyDown(KEY_SIX)))) {
			buttonExponentColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyExponent, mousePos)) {
			buttonExponentColor = operatorColorHighlight;
		}
		else {
			buttonExponentColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyEquals, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "equals";
		}
		else if ((CheckCollisionRecs(keyEquals, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_EQUAL) && (!IsKeyDown(KEY_LEFT_SHIFT) && !IsKeyDown(KEY_RIGHT_SHIFT)))) {
			buttonEqualsColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyEquals, mousePos)) {
			buttonEqualsColor = operatorColorHighlight;
		}
		else {
			buttonEqualsColor = operatorButtonColor;
		}

		if (CheckCollisionRecs(keyAC, mousePos) && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
			buttonPress = "clear";
		}
		else if ((CheckCollisionRecs(keyAC, mousePos) && IsMouseButtonDown(MOUSE_BUTTON_LEFT)) || (IsKeyDown(KEY_DELETE))) {
			buttonACColor = operatorColorPressed;
		}
		else if (CheckCollisionRecs(keyAC, mousePos)) {
			buttonACColor = operatorColorHighlight;
		}
		else {
			buttonACColor = operatorButtonColor;
		}


		EndDrawing();
		//----------------------------------------------------------------------------------
	}

	// De-Initialization
	//--------------------------------------------------------------------------------------
	CloseWindow();        // Close window and OpenGL context
	//--------------------------------------------------------------------------------------

	return 0;
}

/*
Arrows, A/C
1, 2, 3, + , -
4, 5, 6, * , /
7, 8, 9, ( , )
 A/C, 0 , ., ^, =
*/
